import bcrypt from "bcryptjs";
import prisma from "../config/db.js";
import jwt from "jsonwebtoken";
import { autenticarToken } from "../middlewares/authMiddleware.js";


export const registrarUsuario = async (req, res) => {
    const { nome, email, senha } = req.body; 

    try {
        console.log("üîç Dados recebidos:", req.body);

        if (!nome || !email || !senha) {  
            
            return res.status(400).json({ error: "Todos os campos s√£o obrigat√≥rios" });
        }

        const usuarioExistente = await prisma.usuario.findFirst({ where: { email } });
        if (usuarioExistente) {
            
            return res.status(400).json({ error: "E-mail j√° cadastrado" });
        }

        const senhaHash = await bcrypt.hash(senha, 10); // Alterando "password" para "senha"
        

        const novoUsuario = await prisma.usuario.create({
            data: { nome, email, senha: senhaHash }
        });

        console.log("‚úÖ Usu√°rio criado com sucesso:", novoUsuario);
        res.status(201).json({ message: "Usu√°rio criado!", user: { id: novoUsuario.id, email: novoUsuario.email } });
    } catch (error) {
        console.error("‚ùå Erro ao registrar usu√°rio:", error);
        res.status(500).json({ error: "Erro ao registrar usu√°rio", details: error.message });
    }
};


export const loginUsuario = async (req, res) => {
  const { email, senha } = req.body;

  try {
      console.log("üì© Dados recebidos para login:", req.body);

      if (!email || !senha) {
          return res.status(400).json({ message: "Email e senha s√£o obrigat√≥rios." });
      }

      // üî• Buscar usu√°rio no banco
      const usuario = await prisma.usuario.findUnique({ where: { email } });

      console.log("üîç Usu√°rio encontrado:", usuario);

      if (!usuario) {
          return res.status(404).json({ message: "Usu√°rio n√£o encontrado." });
      }

      if (!usuario.senha) {
          return res.status(500).json({ message: "Erro no servidor: senha n√£o encontrada." });
      }

      // üîë Testando a compara√ß√£o da senha
      console.log("üîë Senha digitada:", senha);
      console.log("üîí Senha do banco:", usuario.senha);

      const senhaCorreta = await bcrypt.compare(senha, usuario.senha);
      console.log("üîÑ Compara√ß√£o de senha:", senhaCorreta);

      if (!senhaCorreta) {
          return res.status(401).json({ message: "Senha incorreta." });
      }

      // üîë Verificar se a chave secreta do JWT est√° carregada
      console.log("üîë JWT_SECRET:", process.env.JWT_SECRET);
      if (!process.env.JWT_SECRET) {
          return res.status(500).json({ message: "Erro no servidor: chave JWT n√£o configurada." });
      }

      const token = jwt.sign({ id: usuario.id }, process.env.JWT_SECRET, { expiresIn: "1h" });

      res.json({ message: "Login bem-sucedido!", token });
  } catch (error) {
      console.error("‚ùå Erro ao fazer login:", error);
      res.status(500).json({ message: "Erro ao processar login.", detalhes: error.message });
  }
};

  

export const listarUsuarios = async (req, res) => {
    try {
        const usuarios = await prisma.usuario.findMany({
            select: { id: true, nome: true, email: true } // Exclui a senha por seguran√ßa
        });

        console.log("‚úÖ Lista de usu√°rios retornada!");
        res.status(200).json(usuarios);
    } catch (error) {
        console.error("‚ùå Erro ao listar usu√°rios:", error);
        res.status(500).json({ error: "Erro ao buscar usu√°rios" });
    }
};

export const deletarUsuario = async (req, res) => {
    const { id } = req.params;

    try {
        const usuario = await prisma.usuario.findUnique({ where: { id } });
        if (!usuario) {
            return res.status(404).json({ error: "Usu√°rio n√£o encontrado" });
        }

        await prisma.usuario.delete({ where: { id } });

        console.log(`‚úÖ Usu√°rio ${id} deletado com sucesso!`);
        res.status(200).json({ message: "Usu√°rio deletado com sucesso!" });
    } catch (error) {
        console.error("‚ùå Erro ao deletar usu√°rio:", error);
        res.status(500).json({ error: "Erro ao deletar usu√°rio" });
    }
};
